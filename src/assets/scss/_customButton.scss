$button-paddings: 0.75em 1em !default;

$button-font-case: (
  tiny: true,
  small: false,
  default: false,
  large: false
) !default;

$square-button-size: 50px !default;

$button-icons-color: $dark-gray !default;

$button-icons-hover-color: $black !default;

// 'close': (name: 'bg-icon-close-24', size: 24px 24px, margin: default 10 default default)
@mixin button-icons {
  @each $name, $icon-defs in $square-button-icons {
    $height: 24px;
    $width: 24px;
    $icons-color: $button-icons-color;
    $icons-hover-color: $button-icons-hover-color;
    &.#{$name} {
      position: relative;
      &:before {
        content: '';
        position: absolute;

        @if map-has-key($icon-defs, size) {
          $height: get-side(map-get($icon-defs, size), top);
          $width: get-side(map-get($icon-defs, size), right);
        }

        height: $height;
        width: $width;

        @if map-has-key($icon-defs, offset) {
          $top: get-side(map-get($icon-defs, offset), top);
          $right: get-side(map-get($icon-defs, offset), right);
          $bottom: get-side(map-get($icon-defs, offset), bottom);
          $left: get-side(map-get($icon-defs, offset), left);

          @if $top != auto {
            top : $top;
          }
          @else if $bottom != auto {
            top: initial;
          }
          @else {
            top: (get-side($square-button-size, top) - $height) / 2;
          }

          @if $right != auto {
            right : $right;
          }

          @if $bottom != auto {
            bottom : $bottom;
          }

          @if $left != auto {
            left : $left;
          }
          @else if $right != auto {
            left: initial;
          }
          @else {
            left: (get-side($square-button-size, right) - $width) / 2;
          }
        }
        @else {
          top: (get-side($square-button-size, top) - $height) / 2;
          left: (get-side($square-button-size, right) - $width) / 2;
        }

        @if map-has-key($icon-defs, color) {
          $icons-color: map-get($icon-defs, color);
        }

        @if map-has-key($icon-defs, name) {
          background-image: sassvg(map-get($icon-defs, name), $icons-color);
        }
      }

      @if map-has-key($icon-defs, hover-color) {
        &:hover:before {
          background-image: sassvg(map-get($icon-defs, name),  map-get($icon-defs, hover-color));
        }
      }
      @else {
        &:hover:before {
          background-image: sassvg(map-get($icon-defs, name),  map-get($icon-defs, $button-icons-hover-color));
        }
      }
    }
  }
}

@mixin square-button {
  .square-button {
    appearance: none;
    background-color: transparent;
    border: none;
    cursor: pointer;
    display: inline-block;
    font-family: inherit;
    height: get-side($square-button-size, right);
    line-height: 1;
    margin: 0;
    padding: 0;
    position: relative;
    text-align: center;
    vertical-align: middle;
    width: get-side($square-button-size, top);

    @include button-icons();
  }
}

@mixin button-custom-sizes {
  @each $size, $buttons in $custom-button-sizes {
    @include breakpoint($size) {
      $button-defs: map-get($buttons, default);

      @if map-has-key($button-defs, font-size) {
        $font-size-temp: map-get($button-defs, font-size);
        font-size: $font-size-temp;
      } @else if map-has-key($button-defs, fs) {
        $font-size-temp: map-get($button-defs, fs);
        font-size: $font-size-temp;
      }

      @if map-has-key($button-defs, line-height) {
        $line-height-temp: map-get($button-defs, line-height);
        line-height: $line-height-temp;
      } @else if map-has-key($button-defs, lh) {
        $line-height-temp: map-get($button-defs, lh);
        line-height: $line-height-temp;
      }

      @if map-has-key($button-defs, padding) {
        $padding-temp: map-get($button-defs, padding);
        padding: $padding-temp;
      } @else if map-has-key($button-defs, p) {
        $padding-temp: map-get($button-defs, p);
        padding: $padding-temp;
      }
    }
  }
}

@mixin button-base {
  @include disable-mouse-outline;
  display: inline-block;
  vertical-align: middle;
  margin: $button-margin;
  font-family: $button-font-family;

  appearance: none;
  border: 1px solid transparent;
  border-radius: $button-radius;
  transition: $button-transition;

  //font-size: map-get($button-sizes, default);
  text-align: center;
  cursor: pointer;

  @include button-custom-sizes;
}

@mixin foundation-button {
  .button {
    @include button;

    // Sizes
    @each $size, $buttons in $custom-button-sizes {
      @each $button, $button-defs in map-remove($buttons, default) {
        &.#{$button} {
          @include breakpoint($size) {
            @if map-has-key($button-defs, 'font-size') {
              font-size: map-get($button-defs, 'font-size');
            } @else if map-has-key($button-defs, 'fs') {
              font-size: map-get($button-defs, 'fs');
            }

            @if map-has-key($button-defs, 'line-height') {
              line-height: map-get($button-defs, 'line-height');
            } @else if map-has-key($button-defs, 'lh') {
              line-height: map-get($button-defs, 'lh');
            }

            @if map-has-key($button-defs, 'padding') {
              padding: map-get($button-defs, 'padding');
            } @else if map-has-key($button-defs, 'p') {
              padding: map-get($button-defs, 'p');
            }

            @if map-has-key($button-defs, 'text-transform') {
              text-transform: map-get($button-defs, 'text-transform');
            } @else if map-has-key($button-defs, 'tt') {
              text-transform: map-get($button-defs, 'tt');
            }
          }
        }
      }
    }

    &.expanded { @include button-expand; }

    // Colors
    @each $name, $color in $button-palette {
      @if $button-fill != hollow {
        &.#{$name} {
          @include button-style($color, auto, auto);
        }
      }
      @else {
        &.#{$name} {
          @include button-hollow-style($color);
        }

        &.#{$name}.dropdown::after {
          border-top-color: $color;
        }
      }
    }

    // Disabled style
    &.disabled,
    &[disabled] {
      @include button-disabled;

      @each $name, $color in $button-palette {
        &.#{$name} {
          @include button-disabled($color, auto);
        }
      }
    }

    // Hollow style
    @if $button-fill != hollow {
      &.hollow {
        @include button-hollow;
        @include button-hollow-style;

        @each $name, $color in $button-palette {
          &.#{$name} {
            @include button-hollow-style($color);
          }
        }
      }
    }

    // Clear style
    @if $button-fill != clear {
      &.clear {
        @include button-hollow;
        @include button-hollow-style;

        &, &:hover, &:focus {
          &, &.disabled, &[disabled] {
            border-color: transparent;
          }
        }

        @each $name, $color in $button-palette {
          &.#{$name} {
            @include button-hollow-style($color);

            &, &:hover,
            &:focus {
              &,
              &.disabled,
              &[disabled] {
                border-color: transparent;
              }
            }
          }
        }
      }
    }

    // Dropdown arrow
    &.dropdown {
      @include button-dropdown;

      @if $button-fill == hollow {
        &::after {
          border-top-color: $button-background;
        }
      }

      &.hollow {
        &::after {
          border-top-color: $button-background;
        }

        @each $name, $color in $button-palette {
          &.#{$name} {
            &::after {
              border-top-color: $color;
            }
          }
        }
      }
    }

    // Button with dropdown arrow only
    &.arrow-only::after {
      top: -0.1em;
      float: none;
      margin-#{$global-left}: 0;
    }
  }
  a.button {
    &:hover,
    &:focus {
      text-decoration: none;
    }
  }

  @include square-button;
}