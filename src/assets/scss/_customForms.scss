@mixin form-label {
  display: block;
  margin: $form-label-margin;

  font-size: $form-label-font-size;
  font-weight: $form-label-font-weight;
  line-height: $form-label-line-height;
  color: $form-label-color;
}

@mixin form-control-wrapper {
  $height: ($input-font-size * unitless-calc($input-line-height)) + (get-side($input-padding, 'top') + get-side($input-padding, 'bottom'));

  .form-control-wrapper {
    height: $height;
    @if $global-flexbox {
      display: flex;
      flex: 0 0 auto;
      align-items: center;
    }
    @else {
      width: 1%;
      height: 100%;
    }
  }
}

@mixin form-label-middle {
  $input-border-width: get-border-value($input-border, width);

  &.middle {
    line-height: $input-line-height;
    margin: $form-spacing;
    padding: get-side($input-padding, top) 0 get-side($input-padding, bottom);
  }

  @include -zf-each-breakpoint {
    &.#{$-zf-size}-middle {
      line-height: $input-line-height;
      margin: $form-spacing;
      padding: get-side($input-padding, top) 0 get-side($input-padding, bottom);
    }
  }
}

@mixin form-element {
  $height: ($input-font-size * unitless-calc($input-line-height)) + (get-side($input-padding, 'top') + get-side($input-padding, 'bottom'));

  display: block;
  box-sizing: border-box;
  width: 100%;
  height: $height;
  margin: $form-spacing;
  padding: $input-padding;

  border: $input-border;
  border-radius: $input-radius;
  background-color: $input-background;
  box-shadow: $input-shadow;

  font-family: $input-font-family;
  font-size: $input-font-size;
  font-weight: $input-font-weight;
  line-height: $input-line-height;
  color: $input-color;

  @if has-value($input-transition) {
    transition: $input-transition;
  }

  // Focus state
  &:focus {
    outline: none;
    border: $input-border-focus;
    background-color: $input-background-focus;
    box-shadow: $input-shadow-focus;

    @if has-value($input-transition) {
      transition: $input-transition;
    }
  }
}

// Foundation for Sites by ZURB
// foundation.zurb.com
// Licensed under MIT Open Source

////
/// @group forms
////

/// Color of labels prefixed to an input.
/// @type Color
$input-prefix-color: $black !default;

/// Background color of labels prefixed to an input.
/// @type Color
$input-prefix-background: $light-gray !default;

/// Border around labels prefixed to an input.
/// @type Border
$input-prefix-border: 1px solid $medium-gray !default;

/// Left/right padding of an pre/postfixed input label
$input-prefix-padding: 1rem !default;

@mixin foundation-form-prepostfix {
  $height: ($input-font-size * unitless-calc($input-line-height)) + (get-side($input-padding, 'top') + get-side($input-padding, 'bottom'));
  //$height: ($input-font-size + $form-spacing * 1.5);

  .input-group {
    display: if($global-flexbox, flex, table);
    width: 100%;
    margin-bottom: $form-spacing;

    @if $global-flexbox {
      align-items: stretch;
    }

    > :first-child {
      border-radius: if($global-text-direction == rtl, 0 $input-radius $input-radius 0, $input-radius 0 0 $input-radius);
    }

    > :last-child {
      > * {
        border-radius: if($global-text-direction == rtl, $input-radius 0 0 $input-radius, 0 $input-radius $input-radius 0);
      }
    }
  }

  %input-group-child {
    margin: 0;
    white-space: nowrap;

    @if not $global-flexbox {
      display: table-cell;
      vertical-align: middle;
    }
  }

  .input-group-label {
    @extend %input-group-child;
    padding: 0 $input-prefix-padding;
    border: $input-prefix-border;
    background: $input-prefix-background;

    color: $input-prefix-color;
    text-align: center;
    white-space: nowrap;

    font-size: $input-font-size;

    &:last-child {
      border-bottom-right-radius: $input-radius;
      border-top-right-radius: $input-radius;
    }

    @if $global-flexbox {
      display: flex;
      flex: 0 0 auto;
      align-items: center;
    }
    @else {
      width: 1%;
      height: 100%;
    }

    @if has-value($input-prefix-border) {
      &:first-child {
        border-#{$global-right}: 0;
      }

      &:last-child {
        border-#{$global-left}: 0;
      }
    }
  }

  .input-group-field {
    @extend %input-group-child;
    border-radius: 0;

    @if $global-flexbox {
      flex: 1 1 0px; // sass-lint:disable-line zero-unit
      min-width: 0;
    }
    @else {
      height: $height;
    }
  }

  .input-group-button {
    @extend %input-group-child;
    padding-top: 0;
    padding-bottom: 0;
    text-align: center;

    @if $global-flexbox {
      display: flex;
      flex: 0 0 auto;
    }
    @else {
      width: 1%;
      height: 100%;
    }

    a,
    input,
    button,
    label {
      @extend %input-group-child;

      @if $global-flexbox {
        height: auto;
        align-self: stretch;
      }
      @else {
        height: $height;
      }
      padding-top: 0;
      padding-bottom: 0;
      font-size: $input-font-size;
    }
  }

  // Specificity bump needed to prevent override by buttons
  @if not $global-flexbox {
    .input-group .input-group-button {
      display: table-cell;
    }
  }
}

@mixin foundation-form-fieldset {
  fieldset {
    margin: 0;
    padding: 0;
    border: 0;
  }

  legend {
    color: $legend-color;
    font-size: $legend-font-size;
    line-height: $legend-line-height;
    max-width: 100%;
    margin: $form-legend-margin;;
  }

  .fieldset {
    @include fieldset;
  }
}

@mixin input-with-icon {
  $height: ($input-font-size * unitless-calc($input-line-height)) + (get-side($input-padding, 'top') + get-side($input-padding, 'bottom'));

  .input-with-icon {
    position: relative;

    .square-button {
      position: absolute;
      #{$global-right}: 0;
      top: ($height - rem-calc(get-side($square-button-size, top))) / 2;
    }

    input {
      padding-#{$global-right}: rem-calc(get-side($square-button-size, #{$global-right})) + get-side($input-padding, #{$global-right});
    }
  }
}

@mixin foundation-form-checkbox {
  [type='file'],
  [type='checkbox'],
  [type='radio'] {
    appearance: none;
    margin: 0;
    height: 0;
    width: 0;

  }

  // Styles for input/label siblings
  [type='checkbox'] + label,
  [type='radio'] + label {
    display: inline-block;
    vertical-align: baseline;

    margin: $form-checkbox-margin;
    padding: $form-checkbox-label-padding;

    &[for] {
      cursor: pointer;
    }
  }

  $checkbox-icons: (
    'checkbox': (
      'default': ('name': icon-checkbox-16, 'size': 16px),
      'checked': ('name': icon-checkbox-8, 'size': 8px, 'offset': 4px)
    ),
    'radio': (
      'default': ('name': icon-radio-16, 'size': 16px),
      'checked': ('name': icon-radio-8, 'size': 8px, 'offset': 4px),
    )
  ) !default;

  @each $type, $states in $checkbox-icons {
    [type='#{$type}'] + label {
      position: relative;

      @each $state, $props in $states {

        @if $state == 'default' {
          &:before {
            @extend %svg-#{map-get($props, name)};
            content: '';
            #{$global-left}: 0;
            position: absolute;
            top: 50%;
            transform: translateY(-50%);
            width: get-side(map-get($props, 'size'), #{$global-left});
            height: get-side(map-get($props, 'size'), top);
          }
        }

        @else if($state == 'checked') {
          &:after {
            @extend %svg-#{map-get($props, name)};
            content: '';
            #{$global-left}: get-side(map-get($props, 'offset'), left);
            position: absolute;
            top: 50%;
            transform: translateY(-50%);
            width: get-side(map-get($props, 'size'), #{$global-left});
            height: get-side(map-get($props, 'size'), top);
            opacity: 0;
            transition: opacity $transition-speed-normal;
          }
        }
      }
    }

    [type='#{$type}'] {
      &:checked + label:after {
        opacity: 1;
      }
    }

  }

  // Normalize file input width
  [type='file'] {
    overflow: hidden;
  }
}

@mixin form-select {
  $height: ($input-font-size * unitless-calc($input-line-height)) + (get-side($input-padding, 'top') + get-side($input-padding, 'bottom'));

  height: $height;
  margin: 0 0 $form-spacing;
  padding: $input-padding;

  appearance: none;
  border: $input-border;
  border-radius: $select-radius;
  background-color: $select-background;

  font-family: $input-font-family;
  font-size: $input-font-size;
  font-weight: $input-font-weight;
  line-height: $input-line-height;
  color: $input-color;

  @if $select-triangle-color != transparent {
    background-image: inline-down-12x6();
    background-origin: content-box;
    background-position: $global-right (-(rem-calc(get-side($select-icon-size, #{$global-right})) + get-side($input-padding, #{$global-right}))) center;
    background-repeat: no-repeat;
    background-size: get-side($select-icon-size, left) get-side($select-icon-size, top);

    padding-#{$global-right}: rem-calc(get-side($select-icon-size, #{$global-right})) + get-side($input-padding, #{$global-right}) * 2;
  }

  @if has-value($input-transition) {
    transition: $input-transition;
  }

  // Focus state
  &:focus {
    outline: none;
    border: $input-border-focus;
    background-color: $input-background-focus;
    box-shadow: $input-shadow-focus;

    @if has-value($input-transition) {
      transition: $input-transition;
    }
  }

  // Disabled state
  &:disabled {
    background-color: $input-background-disabled;
    cursor: $input-cursor-disabled;
  }

  // Hide the dropdown arrow shown in newer IE versions
  &::-ms-expand {
    display: none;
  }

  &[multiple] {
    height: auto;
    background-image: none;
  }
}

@mixin foundation-form-label {
  label {
    @include form-label;
    @include form-label-middle;
  }
}

@mixin form-error {
  display: none;
  margin: $input-error-margin;

  font-size: $input-error-font-size;
  font-weight: $input-error-font-weight;
  color: $input-error-color;
}

@mixin foundation-forms {
  @include foundation-form-text;
  @include foundation-form-checkbox;
  @include foundation-form-label;
  @include foundation-form-helptext;
  @include foundation-form-prepostfix;
  @include foundation-form-fieldset;
  @include foundation-form-select;
  @include foundation-form-error;
  @include form-control-wrapper;
  @include input-with-icon;
}
